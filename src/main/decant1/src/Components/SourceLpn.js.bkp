import React, {useEffect, useRef, useState} from 'react';
import axios from 'axios';
import TextField from '@material-ui/core/TextField';
import AuthApi from '../Services/AuthApi'
import Cookies from 'js-cookie';
import { trackPromise } from 'react-promise-tracker'

function SourceLpn (props) {

    /*const [lodnum, setLodnum] = useState("");
    const [errorState, setErrorState] = useState();
    const [errorText, setErrorText] = useState("");*/
    
     const [lodnumState, setLodnumState] = useState({
            ...props.stateData
      });
    
   const lodnumInputRef = useRef(null);

  /*  useEffect(() =>{
        console.log(lodnumState.errorState);
        if(lodnumState.errorState){
            console.log(lodnumInputRef);
            lodnumInputRef.current.focus();
        }  
    },[lodnumState.errorState]);*/

    const Auth = React.useContext(AuthApi);

    const handleSourceLpnChange = e => {
        validateSourceLpn(e.target.value );
        
    }

    const handleStateChange = (updatedState) => {
        props.onLodnumStateChange(updatedState)
    }

    const validateSourceLpn = (srclpn) => {
        trackPromise(axios.get('/decanting/ws/cws/tosgGetInventoryIdentifierDetails?srclpn=' + srclpn,{
            headers : {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Access-Control-Allow-Origin' : 'http://localhost:3000',
                'Access-Control-Allow-Credentials' : true
            },withCredentials: true ,
            credentials: 'include',
        }).then((response) =>{
             console.log("8080 response " +JSON.stringify(response.data));
              if(response.data.response.lodnum === srclpn){
                const updatedState = {
                    ...props.stateData,
                    lodnum:response.data.response.lodnum,
                    lodnumError: false,
                  };
                  setLodnumState(updatedState);
                  handleStateChange(updatedState);
    
                }else{
                    /*setLodnum(srclpn);
                    setErrorState(true);
                    setErrorText("Invalid Source Pallet LPN");*/

                    const updatedState = {
                        ...props.stateData,
                        lodnum:srclpn,
                        lodnumError: true,
                      };

                    setLodnumState(updatedState);
                }
                
                })
            .catch((error) => {

                   /* setLodnum(srclpn);
                    setErrorState(true);
                    setErrorText("Invalid Source Pallet LPN");*/
                    console.log("error " , error)
                    const updatedState = {
                        ...props.stateData,
                        lodnum:srclpn,
                        lodnumError: true
                      };

                      setLodnumState(updatedState);
                    // Cookies.set("user", "loginfalse");
                    // if(error.response.status===401){
                    //     Auth.setAuth(false);
                    //     Cookies.remove("user");
                    // }
                }))
        

    };

        return(
            <TextField
                    id="srclpn"
                    label="Source Pallet LPN"
                    style={{ margin: 8 }}
                    fullWidth
                    margin="normal"
                    InputLabelProps={{
                        shrink: true,
                    }}
                    variant="outlined"
                    onBlur={handleSourceLpnChange}
                    error={lodnumState.lodnumError}
                    helperText={lodnumState.lodnumError ? 'Invalid Source Pallet LPN' : ''}
                    required

                />
        )
}

export default SourceLpn;